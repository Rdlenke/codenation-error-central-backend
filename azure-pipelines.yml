# # ASP.NET Core (.NET Framework)
# # Build and test ASP.NET Core projects targeting the full .NET Framework.
# # Add steps that publish symbols, save build artifacts, and more:
# # https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

# trigger:
# - master

# pool:
#   vmImage: 'windows-latest'

# variables:
#   solution: '**/*.sln'
#   buildPlatform: 'Any CPU'
#   buildConfiguration: 'Release'

# steps:
# - task: NuGetToolInstaller@1

# - task: NuGetCommand@2
#   inputs:
#     restoreSolution: '$(solution)'

# - task: VSBuild@1
#   inputs:
#     solution: '$(solution)'
#     msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

# - task: AzureRmWebAppDeployment@4
#   inputs:
#     ConnectionType: 'AzureRM'
#     azureSubscription: 'Free Trial (78998849-35fc-442f-b867-58deb51a76d5)'
#     appType: 'webApp'
#     WebAppName: 'error-central-codenation-g2'
#     packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

steps:

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
  displayName: 'dotnet build $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '**/*.csproj'
    feedsToUse: config
    nugetConfigPath: NuGet.config
    
- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration)'
    
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'errocentralapi'

- task: PublishBuildArtifacts@1

